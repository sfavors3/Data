x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
c(foo=11,bar=2,norf=NA)
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<c(11,2,NA)
vect2<-c(11,2,NA)
names(vects)<-c("foo", "bar","norf")
names(vects2)<-c("foo", "bar","norf")
names(vect2)<-c("foo", "bar","norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags)
cls_list <- sapply(flags, class)
info()
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors, mean)
flag_shapes<-flags[,19:23]
data(mtcars)
sapply(subset(mtcards,cyl=4|cyl=8))
subset(mtcars,cyl=4|cyl=8)
subset(mtcars,cyl=4,cyl=8)
subset(mtcars,cyl=4 || cyl=8)
subset(mtcars,cyl=4 | cyl=8)
subset(mtcars,mtcars$cyl=4 | mtcars$cyl=8)
subset(mtcars,cyl=4)
subset(mtcars,cyl==4)
subset(mtcars,cyl==4,cyl==8)
subset(mtcars,cyl==4 | cyl==8)
diff_cars<-subset(mtcars,cyl==4 | cyl==8)
subset(diff_cars,cyl==4)
sapply(subset(diff_cars,cyl==4),sum)
sapply(subset(diff_cars,cyl==8),sum)
abs(909.00-2929.00)
sapply(subset(diff_cars,cyl==4,average))
sapply(subset(diff_cars,cyl==4,mean))
sapply(subset(diff_cars,cyl==4),average))
sapply(subset(diff_cars,cyl==4),mean))
swirl()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colos <- flags[,11:17]
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
range_mat <-sapply(flag_shapes, range)
shape_mat <-sapply(flag_shapes, range)
shape_mat
class(shape_mt)
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <-unique(flags)
unique_vals <-unique(c(flags))
unique_vals <-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
outcome <- read.csv(outcome-of-care-measures.csv, colClasses)
outcome <- read.csv(c:/Uses/sfavors3/Google Drive/R Programming/assignment3/outcome-of-care-measures.csv, colClasses)
outcome <- read.csv("c:/Uses/sfavors3/Google Drive/R Programming/assignment3/outcome-of-care-measures.csv", colClasses)
outcome <- read.csv("c:/Users/sfavors3/Google Drive/R Programming/assignment3/outcome-of-care-measures.csv", colClasses)
outcome <- read.csv("c:/Users/sfavors3/Google Drive/R Programming/assignment3/outcome-of-care-measures.csv", colClasses="character")
head(outcome)
sapply(outcome,summary)
tapply(outcome,summary)
summary(outcome)
outcome[,11]<- as.numeric(outcome[,11])
heartattack <-outcome[,11]
hist(heartattack)
hist(heartattack, col="green")
hist(heartattack, mean="green")
hist(heartattack, mean="green", ylines=45)
hist(heartattack, col="green", ylines=45)
hist(heartattack, col="green", ylim=45)
hist(heartattack, col="green", ylim=c(0,12))
hist(heartattack, col="bluegreen", ylim=c(0,12))
hist(heartattack, col="blue", ylim=c(0,12))
hist(heartattack, col="blue", ylim=c(0,12), density=45)
his
hist(heartattack,col="grey")
outcome
paste(directory,file,sep=""))
paste(directory,file,sep="")
directory<- "c:/Users/sfavors3/Google Drive/R Programming/assignment3"
file<- "outcome-of-care-measures.csv"
paste(directory,file,sep="")
paste(directory,file,sep="")
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
?tapply
?vapply
directory<- "c:/Users/sfavors3/Google Drive/R Programming/assignment3"
file<- "outcome-of-care-measures.csv"
paste(directory,file,sep="")
data <- read.csv(paste(directory,file,sep=""))
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
directory<- "c:/Users/sfavors3/Google Drive/R Programming/assignment3/"
data <- read.csv(paste(directory,file,sep=""))
View(data)
str(data)
bestdata<-str(data)
bestdata
bestdata<-summary(data)
bestdata
sapply(data,min)
head(hosital_vector, n=1)
head(data,n=1)
names(data)
data[,11]
data[,11]
tapply(data[,11],str,simplify=TRUE)
tapply(data,data[,11],str,simplify=TRUE)
state<-split(data,data$state)
state<-split(data,data$State)
str(state)
rm(state)
ls(environment(State))
ls(environment(best))
data[,c(2,13)]
head(data[,c(2,13)])
head(data)
sapply(data,head)
summary(head(data))
summary(head(data))
names(data)
core<-data[,c(1:11,17,23)]
View(core)
names(core)
str(core)
sapply(core,summary)
colnames(core)[c(11,12,13)]<-c("Heart.Attack","Heart.Failure", "Pneumonia")
View(core)
View(core)
View(core)
write.csv(paste(directory,"core.csv"),x=Fail)
write.csv(paste(directory,"core.csv"))
write.csv(paste(directory,"core.csv"),core)
write.csv(paste(directory,"core.csv"),core=Fail)
write.table(core,"c:/Users/sfavors3/Google Drive/R Programming/assignment3/core.txt",sep="\t")
library(xlsReadWrite)
install.packages("xlsReadWrite")
wriite.csv(core,"c:/Users/sfavors3/Google Drive/R Programming/assignment3/core.txt",row.names=TRUE)
write.csv(core,"c:/Users/sfavors3/Google Drive/R Programming/assignment3/core.txt",row.names=TRUE)
write.csv(core,"c:/Users/sfavors3/Google Drive/R Programming/assignment3/core.csv",row.names=TRUE)
head(core)
summary(core)
head(core)
one<-core[,2,11,12,13]
one<-core[,c(2,11,12,13)]
View(one)
summary(one)
head(one)
str(one)
sapply(one,min)
min(data[11,12,13])
minimum(data[11,12,13])
min(one,na.rm=TRUE)
min(one[11,12,13],na.rm=TRUE)
head(one)
gsub("Not Available","NA",one)
complete<-gsub("Not Available","NA",one[c(11,12,13)])
complete<-gsub("Not Available","NA",one[c(2:4)])
rm(complete)
remove(bestdata,directory,file)
remove(core,data)
best <- function(state, outcome) {
## Read outcome data
directory<- "c:/Users/sfavors3/Google Drive/R Programming/assignment3/"
file<- "outcome-of-care-measures.csv"
data <- read.csv(paste(directory,file,sep=""))
colnames(data) [c(11,17,23)]<-c("H")
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
best
best
best()
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
best(pa,heart.failure)
View(best_data)
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
best(pa,heart)
View(best_data)
rm(one)
split(best_data,best_data$State)
head(split(best_data,best_data$State))
sapply(head(split(best_data,best_data$State)),min)
sapply(split(best_data,best_data$State)),str)
sapply(split(best_data,best_data$State)),summary)
sapply(split(best_data,best_data$State),summary)
sapply(split(best_data,best_data$State),str)
best_data[,.SD[which.min(c(Heart.Attack,Heart.Failure,Pneumonia)],by=State]
best_data[,.SD[which.min(c(Heart.Attack,Heart.Failure,Pneumonia))],by=State]
by(best_data,best_data$State, function(x) x[whiich.min(c(x$Heart.Attack,x$Heart.Failure)),])
by(best_data,best_data$State, function(x) x[which.min(c(x$Heart.Attack,x$Heart.Failure)),])
by(best_data,best_data$State)
by(best_data,best_data$State,min)
sapply(best_data$Heart.Attack,min)
min(best_data$Heat.Attack,na.rm=TRUE)
is.na(best_data)
best_data[,best_data$Heart.Attack=="Not Available"]
best_data[,best_data$Heart.Attack="Not Available"]
best_data[,best_data$Heart.Attack=="Not Available"]
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
best(pa,heart)
best(pa,heart)
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
best(pa,heart)
best <- function(state, outcome) {
## Set variables
directory<- "c:/Users/sfavors3/Google Drive/R Programming/assignment3/"
file<- "outcome-of-care-measures.csv"
## Read outcome data
dataFromFile <- read.csv(paste(directory,file,sep=""), colClasses="character")
colnames(dataFromFile) [c(11,17,23)]<-c("heart.attack", "heart.failure", "Pneumonia")
datawithNA <- dataFromFile[,c(2,7,11,17,23)]
datawithNA[datawithNA=="Not Available"] <- NA
complete<<- na.omit(datawithNA)
#   ## convert Heart Attack, Heart Failure and Pneumonia rows into numerics
#   datawithNONA[,3]<- as.numeric(as.character(datawithNONA[,3]))
#   datawithNONA[,4]<- as.numeric(as.character(datawithNONA[,4]))
#   datawithNONA[,5]<- as.numeric(as.character(datawithNONA[,5]))
#
#   complete<<- datawithNONA
##  This function extact the named element from a dataset:
##  lapply(complete,function(elem) elem[2])
## Check that state and outcome are valid
if (state %in% complete$State==FALSE)
message("invalid state")
if (outcome %in% c("heart attack","heart failure", "Pneumonia")==FALSE)
message("invalid outcome")
## Return hospital name in that state with lowest 30-day death
## rate
i<- state
j<- 3
if ((outcome ="heart attack")==TRUE)
else if ((outcome ="heart failure")==TRUE)
else
j<- 4
j<-5
temp<<-complete[complete[2]==i,]
temp[which.min(apply(temp[j],MARGIN=1,min)),]
temp[which.min(apply(temp[j],MARGIN=1,min)),]
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
sapply(best_data$Heart.Attack,min)
best("TX","heart attack")
min(temp[3])
temp[which(temp[2]=="TX")]
temp[,which(temp[2]=="TX")]
temp[which(temp[2]=="TX"),]
min(temp[3])
View(temp)
temp[3]
min(temp[3])
sapply(temp[3],min)
temp[which(temp[3]==sapply(temp[3],min)),]
temp[which(temp[4]==sapply(temp[4],min)),]
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
View(temp)
View(temp)
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
best("TX","heart failure")
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
best("TX","heart attack")
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
best("TX","heart attack")
min(temp$heart.attack)
min(temp[3])
min(temp[4])
min(temp$heart.failure)
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
temp[temp[4]==outMIN,]
outMIN<- min(temp$heart.failure)
temp[temp[4]==outMIN,]
sort(temp[2],decreasing=FALSE)
sort(temp[,2],decreasing=FALSE)
View(temp)
sort(temp[,1],decreasing=FALSE)
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
best("TX","heart failure")
order(temp[1,])
order(temp[,1])
View(temp)
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
best("TX","heart failure")
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
best("TX","heart failure")
temp<-complete[complete[2]=="TX",]
View(temp)
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
temp[temp[4]==outMIN,]
outMIN<- min(temp$heart.failure)
temp[temp[4]==outMIN,]
sort(temp,order(temp[2]))
sort(temp,order(temp[2]),decreasing=FALSE)
sort(order(temp[2],temp[1:5]),decreasing=FALSE)
sort(order(temp[2],decreasing=FALSE)
)
sort(order(temp[1],decreasing=FALSE))
View(temp)
sort(temp,by=temp$Hospital.Name)
sort(temp,by="Hospital.Name")
sort(temp,order(by="Hospital.Name",decreasing=FALSE)
)
temp[order(temp[1]),]
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
best("TX","")
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/best.R')
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/rankall.R')
rankall("heart failure","best")
View(rankByHosp)
View(rankByHosp)
subset(rankByHosp, rank == 17)
subset(rankByHosp[4], rank == 17)
as.numeric(subset(rankByHosp[4],rank==17))
nrow(rankByHosp)
as.numeric(nrow(rankByHosp))
source('C:/Users/sfavors3/Google Drive/R Programming/assignment3/rankall.R')
rankall("heart failure","best")
rankall("heart failure","worst")
subset(rankByHosp, Rank == 1)
subset(rankByHosp, rank == 1)
rankall("heart failure","best")
subset(rankByHosp, rank == 1)
subset(rankByHosp[4],rank==1)
subset(rankByHosp,rank==1)
subset(head(rankByHosp,rank==1),1)
View(sortData)
tail(rankByHosp,1)
install.packages("knitr")
library(knitr)
library(datasets)
hist(Nile)
hn<- hist(Nile)
hn
str(hn)
head(str)
head(hn)
head(hn,1)
d <- data.frame(list(kids=c("Jack", "Jill"), ages=c(12,10)))
d
d$ages
summary(hn)
summary(lm())
lm()
lm(hn)
lm(hn)
plot(hn)
plot(hn)
data(quiz)
data()
data(BJsales)
summary(Bjsales)
summary(BJsales)
head(BJsales)
BJsales
tail(BJsales)
class(BJsales)
data(Titanic)
summary(Titanic)
head(Titanic)
tail(Titanic)
st(Titanic)
str(Titanic)
Titanic
data(state.region)
data(state.area)
example(lapply)
example(head)
example(persp)
help.search("multivariate normal")
typeof(nrz)
x <-c(88,5,12,13)
x <-c(88,5,12,13)
x <-c(x[1:3],168,x[4])
y<-vector(length=2)
y[1] <5
y[1] <-5
y[2]<-12
y
y <- c(10,15)
y
y[1,2] <-5
"+"(2,3)
2+3
x<- c(1,2,4)
x+ c(5,0,-2)
x*c(5,0,-1)
z <-c(5,12,13)
z[-1]
z[-tail(z)]
tail(z)
seq(from=10,to=100,by=5)
seq(fom1.1, to=2,length=5)
seq(fom=1.1, to=2,length=5)
seq(from=1.1, to=2,length=5)
seq(x)
x
examples(pred)
examples(pred())
example(pred)
example(pred())
?pred
??pred
library(stats)
example(pred)
x<-1:8
z12(x)
z12<- function(z) return(z,z^2))
z12<- function(z) return(c(z,z^2))
z12(x)
matix(z12(x),ncol=2)
matrix(z12(x),ncol=2)
sapply(1:8,z12)
x <-1:20
y <-1felse(x %% 2==0,5,12)
y<-ifelse(x%%2==0,"even","odd")
y
u<-c(2,6,8,9,4,7)
diff(u)
args(ifelse)
grps<-list()
for(gen in c("M","F","I")) grps[[gen]] <- which(g==gen)
c(5,2,list(a=1,b=4))
magicSquare<-matrix(1:16,ncol:4, nrow:4)
b1<-130-1-62-35
magicSquare<-matrix(1:16,col=4,row=4)
matrix(1:16)
matrix(1:16,ncol:4)
matrix(1:16,nrow:4)
matrix(1:16,nrow=4, ncol=4)
magicsquare<-matrix(1:16,nrow=4,ncol=4)
names(magicsquare) c("A","B","C","D")
colnames(magicsquare) <- c("A","B","C","D")
magicsquare
rownames(magicsquare) <- c(1:4)
magicsquare
magicsquare[A2]<-62
magicsquae[2,1]<-62
magicsquare[2,1]<-62
magicsquare
magicsquare<-null
magicsquare[,2]<NULL
magicsquare
magicsquare[,2]<-NULL
magicsquare[1,2]<-NULL
magicsquare[1,2]<-""
magicsquare
magicsquare[2,1]<-62
magicsquare
magicsquare<-matrix(1:16,nrow=4,ncol=4)
colnames(magicsquare) <- c("A","B","C","D")
rownames(magicsquare) <- c(1:4)
magicsquare
magicsquare<-matrix(c(1,0,0,61,62,35,0,2,0,34,0,0,0,0,33,0),ncol=4,nrow=4)
magicsquare
magicsquare<-matrix(c(1,0,0,61,62,35,0,2,0,34,0,0,0,0,33,0),nrow=4,,ncol=4)
magicsquare
transpose(magicsquare)
magicsquare<-matrix(c(1,62,0,0,0,35,34,0,0,0,0,33,61,2,0,0),nrow=4,,ncol=4)
magicsquare
colnames(magicsquare) <- c("A","B","C","D")
rownames(magicsquare) <- c(1:4)
magicsquare
magicsquare["b1"]
setwd("C:/Users/Sherry/Google Drive/R Programming/Getting and Cleaning Data")
list.files(".data")
list.files(".Data")
list.files(".Data")
setwd("C:/Users/Sherry/Google Drive/R Programming/Data")
list.files()
git init
